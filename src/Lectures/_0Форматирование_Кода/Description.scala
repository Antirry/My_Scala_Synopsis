package Lectures.Форматирование_Кода

object Addon_Scalafmt extends App {

/*

  Начнем с того, что в IntelliJ вам сразу доступен Scalafmt
   (инструмент форматирования кода.
     Почитать подробно о нем на английском можно тут:
      https://scalameta.org/scalafmt/)


Необходимые комбинации:

Opt + Cmd + L (для macOS)
Ctrl + Alt + L (для всех остальных)

Только имейте в виду, что форматер кода - это не решение всех проблем.
 И основные правила по оформлению кода все же стоит знать.

 */

}

object indents_spaces_отступы_пробелы extends App {

/*

Отступы:

  два символа на каждом уровне: https://drive.google.com/file/d/1YUCiG2fJw_j4f2sEfjzBv5HfquBuhkzx/view?usp=share_link

Пробелы:
    1) никаких пробелов для скобок, пробел до и после операторов, включая знак равенства
    2) пробел после запятой
    3) пробел после двоеточия

    Ссылка: https://drive.google.com/file/d/1GeQFKnvUJKruJxnopbvTFWE5bf33UiJp/view?usp=sharing

 */

}


object braces_фигурные_скобки extends App {

/*

Скобки:

  Фигурные: опускайте фигурные скобки только если условие if/else
   пишется полностью в одну строку

   Ссылка: https://drive.google.com/file/d/1SdWaBUB0YR8eGHBEAsQSdoo6mBnE5I_p/view?usp=sharing
 */

}

object Transfer_rules_правила_переноса extends App {

/*

Правила переноса:
  Желательно, чтобы длина строки вашего кода не превышала 80 символов. Так что не бойтесь переносить.

Вызов метода с большим числом аргументов:
  1) отступ в два символа
  2) каждый аргумент располагается на отдельной строке

  Ссылка: https://drive.google.com/file/d/1RTCiIz2QSr9E99ipedCDK3-9zv49q6Ia/view?usp=sharing

Объявление метода с большим числом аргументов:
  1) в методе должно быть не больше 30 строк кода
  2) каждый аргумент располагается на отдельной строке
  3) отступ в четыре символа в переменных метода
  4) отступ два символа для тела метода

  Ссылка: https://drive.google.com/file/d/1sO7r1IYgDRowKXIyxAFXOMsyOOs6HUJc/view?usp=sharing

Объявление класса с большим числом параметров:
  1) в классе должно быть не больше 30 методов
  2) отступ в четыре символа в переменных класса
  3) отступ два символа для тела класса
  4) сначала пустая строка, если класс включает метод и так далее
  5) методы, особенно модифицирующие, всегда должны иметь скобки
  6) если метод объявлен со скобками (),
      то при вызове этого метода опускать их не следует

  Ссылка: https://drive.google.com/file/d/1kn5OAlwu-NvOaV92e8qjTYrd9faowgPJ/view?usp=sharing

 */

}

object Names_Имена extends App {

/*

Имена методов:

  1) никаких set/get в имени функции

  2) аксессор = гет-метод: def bar = ...
      Для аксессора - имя метода совпадает с именем элемента,
       к которому аксессор дает доступ

  3) мутатор = сет-метод: def bar_ = (bar: Bar) {
    ...
  }
     Для мутатора - берем имя изменяемого элемента с _ на конце

  4) def isBaz: Boolean = true
      к аксессору, возвращающему булевое значение, обычно прикрепляют is

  Ссылка: https://drive.google.com/file/d/1_dSxcYVnu391s1crI6z_r6Ut7lZLuDeh/view?usp=sharing


Имена значений:

  1) Константы обычно располагают в объекте-компаньоне

  object Configuration {

    переменная: val myValue = ...
    константа: val Pi = 3.14

    def myMethod() = ...
    var myVariable = ...

  }

  2) у констант первые буквы - заглавные - val DefaultPort = 80
  3) сокращения воспринимаемые как обычные слова - maxId
  4) избегайте нижних подчеркиваний - my_value

 */



}